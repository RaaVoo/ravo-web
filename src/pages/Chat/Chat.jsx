import React, { useState, useEffect } from 'react';
import './Chat.css';

const ChatBot = () => {
  const [messages, setMessages] = useState([
    {
      text: 'ÏïàÎÖïÌïòÏÑ∏Ïöî. Î¨∏Ïùò ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî.',
      time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
      sender: 'bot',
    },
  ]);

  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);

const baseURL = "";

// üß© (1) ÌéòÏù¥ÏßÄ Ï≤òÏùå Î°úÎìú Ïãú, ÏÑúÎ≤ÑÏóêÏÑú Î©îÏãúÏßÄ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
useEffect(() => {
  fetch(`/chatbot/messages`)
    .then((res) => res.json())
    .then((data) => {
      console.log("[/chatbot/messages] resp:", data); // üîé Íµ¨Ï°∞ ÌôïÏù∏

      // 1) Î∞∞Ïó¥ Ï∂îÏ∂ú: data.data | data.rows | data.data.rows Ï†ÑÎ∂Ä ÎåÄÏùë
      const list =
        Array.isArray(data?.data) ? data.data :
        Array.isArray(data?.rows) ? data.rows :
        Array.isArray(data?.data?.rows) ? data.data.rows : [];

      if (!Array.isArray(list)) return;

      // 2) ÌïÑÎìúÎ™Ö ÌòºÏö© Î∞©Ïñ¥ (snake/camel)
      const loadedMessages = list.map((msg) => {
        const flag = msg.chat_flag ?? msg.chatFlag;          // PARENTS / AI
        const text = msg.m_content ?? msg.content ?? "";      // Î≥∏Î¨∏
        const ts   = msg.createdDate ?? msg.created_at ?? msg.created_at_ms;

        const sender = flag === "PARENTS" ? "user" : "bot";   // Ïò§Î•∏Ï™Ω/ÏôºÏ™Ω

        return {
          text,
          time: ts ? new Date(ts).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }) : "",
          sender,
        };
      });

      // 3) Ï†ïÎ†¨(ÏÑ†ÌÉù): createdDate Ïò§Î¶ÑÏ∞®Ïàú
      loadedMessages.sort((a,b)=> (a.time > b.time ? 1 : -1));

      // 4) ÏÉÅÌÉú Í∞±Ïã†: Ï¥àÍ∏∞ ÏïàÎÇ¥ Î©îÏãúÏßÄ Ïú†ÏßÄÌïòÍ≥† ÎÇòÎ®∏ÏßÄ ÍµêÏ≤¥
      setMessages((prev) => {
        if (prev?.length) {
          return [prev[0], ...loadedMessages];
        }
        return loadedMessages;
      });
    })
    .catch((err) => console.error("Î©îÏãúÏßÄ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", err));
}, [baseURL]);





  // üß© (2) Î©îÏãúÏßÄ Ï†ÑÏÜ° Ìï®Ïàò ‚Äî /messages/send ÏÇ¨Ïö©
  const handleSend = async () => {
    if (input.trim() === '') return;
    setLoading(true);

    const now = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    const userMessage = { text: input, time: now, sender: 'user' };
    setMessages((prev) => [...prev, userMessage]);

    try {
      const body = {
        content: input,
        mode: 'CONSULT',
        summary: '',
        userNo: 1,
        chatNo: 1, // ÏßÄÍ∏àÏùÄ Í≥†Ï†ïÍ∞í, ÎÇòÏ§ëÏóê ÏÑ∏ÏÖò Íµ¨Î∂Ñ Ï∂îÍ∞Ä Í∞ÄÎä•
        chat_flag: 'PARENTS',
      };

      const res = await fetch(`/chatbot/send`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body),
      });

      const data = await res.json();

      if (data?.success) {
        const botResponse = {
          text: 'Î¨∏ÏùòÍ∞Ä Ï†ëÏàòÎêòÏóàÏñ¥Ïöî. Îã¥ÎãπÏûêÍ∞Ä ÌôïÏù∏ ÌõÑ ÎãµÎ≥ÄÎìúÎ¶¥Í≤åÏöî! üòä',
          time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
          sender: 'bot',
        };
        setMessages((prev) => [...prev, botResponse]);
      } else {
        throw new Error(data.message || 'ÏÑúÎ≤Ñ Ïò§Î•ò');
      }
    } catch (err) {
      console.error('Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®:', err);
      setMessages((prev) => [
        ...prev,
        { text: 'Ï†ÑÏÜ° Ïã§Ìå® „Ö†„Ö† Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.', time: now, sender: 'bot' },
      ]);
    } finally {
      setInput('');
      setLoading(false);
    }
  };

  // ÏóîÌÑ∞ÌÇ§Î°úÎèÑ Ï†ÑÏÜ° Í∞ÄÎä•
  const onKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const today = new Date();
  const formattedDate = today.toLocaleDateString('ko-KR', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
  });
  const weekday = today.toLocaleDateString('ko-KR', { weekday: 'short' });
  const fullDate = `${formattedDate} (${weekday})`;

  return (
    <div className="chatbot-page">
      <div className="chatbot-container">
        <div className="chat-card">
          <div className="chat-header">1:1 Î¨∏ÏùòÌïòÍ∏∞</div>

          <div className="chat-body">
            <div className="chat-date">{fullDate}</div>
            <div className="chat-messages">
              {messages.map((msg, index) => (
                <div key={index} className={`chat-message ${msg.sender}`}>
                  <div className="message-bubble">{msg.text}</div>
                  <div className="message-time">{msg.time}</div>
                </div>
              ))}
            </div>
          </div>

          <div className="chat-input-box">
            <input
              type="text"
              placeholder={loading ? 'Ï†ÑÏÜ° Ï§ë...' : 'ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî'}
              value={input}
              disabled={loading}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={onKeyDown}
            />
            <button onClick={handleSend} disabled={loading || input.trim() === ''}>
              <img src="/icons/send.svg" alt="send" className="send-icon" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatBot;
